###########################################
### Matterhorn configuration properties ###
###########################################

# The HTTP server port.  If you set this to port 80, you need to run Matterhorn as root. Alternatively, if you want
# users to access Matterhorn on port 80 but do not want to run as root, keep the default port (8080) and use an Apache
# HTTPD server with mod_proxy to forward port 80 traffic to Matterhorn on port 8080.
org.osgi.service.http.port=8080

# Whether Matterhorn itself should handle HTTPS traffic.  Even if you set this to 'false',you can still use an Apache
# HTTPD server as a proxy to handle SSL)
org.osgi.service.http.secure.enabled=false

# The secure server port to use if running Matterhorn itself with HTTPS (as opposed to a proxy handling HTTPS).
#org.osgi.service.http.port.secure=8443

# The public URL of this matterhorn installation.  If this felix installation is proxied behind an Apache HTTPD
# reverse proxy, this URL should point to the proxy's port (usually 80).
org.opencastproject.server.url=http://localhost:8080

# The url of the remote service registry.  This is used in cases where there is no direct connection to the service
# registry database such as capture agens running in protected environments. This is typically true for capture agents
# and should be set to the url of a server running the actual implementation of the service registry and the path to 
# the service registry(admin, worker, etc. See the build profiles in pom.xml for a complete list).
#org.opencastproject.serviceregistry.url=${org.opencastproject.server.url}/services

# The base URL to use for publishing job locations. If left commented out, the local server URL will be used.  Set this
# if you intend to support swapping servers with different IPs or host names.
#org.opencastproject.jobs.url=${org.opencastproject.server.url}

# The directory where the system will store its processed files (including temporary files).  This directory should
# be persistent between reboots (i.e., not /tmp)
org.opencastproject.storage.dir=${felix.work}/opencast

# The username and password to present to other Matterhorn servers when calling their REST endpoints.
# The remote server must contain matching values in its config.properties.
org.opencastproject.security.digest.user=matterhorn_system_account
org.opencastproject.security.digest.pass=CHANGE_ME

# The number of times to retry a request if the nonce expires. 
org.opencastproject.security.digest.nonce.retries=12

# The configuration property specifying the minimum amount of time in seconds wait before retrying a request after 
# a nonce timeout. Default is 300 seconds (5 minutes). 
org.opencastproject.security.digest.nonce.base.time=300

# The maximum amount of time to wait in addition to the base time for a random generator to add after a nonce timeout
# so that requests that timeout won't all try again at exactly the same time. Default is 300 seconds (5 minutes).
org.opencastproject.security.digest.nonce.variable.time=300

# Optional account with administrative rights. 
org.opencastproject.security.admin.user=admin
org.opencastproject.security.admin.pass=opencast
org.opencastproject.security.admin.roles=ROLE_ADMIN,ROLE_USER,ROLE_OAUTH_USER

# Optional demo accounts with series memberships, but not administrative rights.  If set to 'true', 1000 users will be
# loaded into the sample user directory.  Usernames are user0, ..., user999.  Passwords are pass0, ..., pass999.
org.opencastproject.security.demo.loadusers=true

# To enable the LDAP user provider, you must uncomment this line, and run on a JVM that provides the
# "com.sun.jndi.ldap" package.
#org.osgi.framework.system.packages.extra=com.sun.jndi.ldap,com.sun.net.ssl.internal.ssl

# The base URL of the streaming server (ususally "rtmp://<SERVER_URL>/matterhorn-engage").
# ${org.opencastproject.server.url} can not be used, because the streaming server does not use the HTTP protocol.
# Streaming is not included in the default workflow, since the Red5 streaming server is a 3rd party component that
# requires separate installation.
#org.opencastproject.streaming.url=rtmp://localhost/matterhorn-engage

# The directory where the matterhorn streaming app for Red5 stores the streams
#org.opencastproject.streaming.directory=${org.opencastproject.storage.dir}/streams

# The directory to store media, metadata, and attachments for download from the engage tool
org.opencastproject.download.directory=${org.opencastproject.storage.dir}/downloads

# The base URL for media downloads.
org.opencastproject.download.url=${org.opencastproject.server.url}/static

# Relational Database configuration.  By default, Matterhorn uses an embedded H2 database.  A standalone database server
# is recommended for production systems.  If you run the ddl script for your db vendor (see docs/scripts/ddl/) manually,
# (this is recommended) set 'ddl-generation' to 'false'.
org.opencastproject.db.ddl.generation=true

# Enable ddl script generation.  This is used by developers to update the ddl scripts, and should not be enabled in production.
#org.opencastproject.db.ddl.script.generation=false

# dbVendor can be any of the values listed at under the "eclipselink.target-database" section of
# http://www.eclipse.org/eclipselink/documentation/2.4/jpa/extensions/p_target_database.htm#target-database
# Common values include MySQL, PostgreSQL.
# org.opencastproject.db.vendor=MySQL

# Matterhorn comes with the jdbc drivers for MySQL (com.mysql.jdbc.Driver) and PostgreSQL (org.postgresql.Driver). To
# add other jdbcDrivers to the Matterhorn runtime, rebuild the matterhorn-db module with your desired drivers.
# org.opencastproject.db.jdbc.driver=com.mysql.jdbc.Driver

# The jdbc connection url, username, and password
# org.opencastproject.db.jdbc.url=jdbc:mysql://localhost/matterhorn
# org.opencastproject.db.jdbc.user=matterhorn
# org.opencastproject.db.jdbc.pass=dbpassword

# Directory to store the search, series and scheduler solr indices.  This should be a persistent and stable directory (default:
# ${org.opencastproject.storage.dir}/searchindex, ${org.opencastproject.storage.dir}/seriesindex, ${org.opencastproject.storage.dir}/schedulerindex)
#org.opencastproject.search.solr.dir=${org.opencastproject.storage.dir}/searchindex
#org.opencastproject.series.solr.dir=${org.opencastproject.storage.dir}/seriesindex
#org.opencastproject.scheduler.solr.dir=${org.opencastproject.storage.dir}/schedulerindex

# URL of the dedicated Solr server to use with the search service.  Note that if the URL is specified, the local search
# index as configured using ${org.opencastproject.search.solr.dir} will be ignored. A dedicated Solr server should be
# set up in order to enable running multiple instances of the search service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
#org.opencastproject.search.solr.url=http://localhost:8983/solr/

# URL of the dedicated Solr server to use with the scheduler service.  Note that if the URL is specified, the local
# scheduler index as configured using ${org.opencastproject.scheduler.solr.dir} will be ignored. A dedicated Solr server
# should be set up in order to enable running multiple instances of the scheduler service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
#org.opencastproject.scheduler.solr.url=http://localhost:8983/solr/

# URL of the dedicated Solr server to use with the series service.  Note that if the URL is specified, the local series
# index as configured using ${org.opencastproject.series.solr.dir} will be ignored. A dedicated Solr server should be 
# set up in order to enable running multiple instances of the series service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
#org.opencastproject.series.solr.url=http://localhost:8983/solr/

# The path to the archive repository
org.opencastproject.episode.rootdir=${org.opencastproject.storage.dir}/archive

# Directory to store the archive index of the episode service.  This should be a persistent and stable directory (default:
# ${org.opencastproject.storage.dir}/archiveindex)
#org.opencastproject.episode.solr.dir=${org.opencastproject.storage.dir}/archiveindex

# URL of the dedicated Solr server for use with the episode service.  Note that if the URL is specified, the local episode
# index as configured using ${org.opencastproject.episode.solr.dir} will be ignored. A dedicated Solr server should be
# set up in order to enable running multiple instances of the episode service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
#org.opencastproject.episode.solr.url=http://localhost:8983/solr/

# The path to the repository of files used during media processing.
org.opencastproject.file.repo.path=${org.opencastproject.storage.dir}/files

# The base URL of the file server.  When using a shared filesystem between servers, set all servers to use the same URL.
# Only then will hard linking between the working file repository and the workspace be enabled to prevent downloads.
#org.opencastproject.file.repo.url=${org.opencastproject.server.url}

# The path to the working files (recommend using fast, transient storage)
org.opencastproject.workspace.rootdir=${org.opencastproject.storage.dir}/workspace

# The ID of the default workflow definition to run when media are ingested
org.opencastproject.workflow.default.definition=full

# The max number of ingests to allow at the same time. If more ingests try than the max they will receive service unavailable.
# If commented out then the default value will be 0, meaning the server will accept all ingests. 
# org.opencastproject.ingest.max.concurrent=3

# The directory to hold the workflow service's Solr configuration and data. This should be a persistent and stable directory (default:
# ${org.opencastproject.storage.dir}/workflowindex) 
#org.opencastproject.workflow.solr.dir=${org.opencastproject.storage.dir}/workflowindex

# URL of the dedicated Solr server to use with the workflow service.  Note that if the URL is specified, the local
# workflow index as configured using ${org.opencastproject.workflow.solr.dir} will be ignored. A dedicated Solr server
# should be set up in order to enable running multiple instances of the workflow service. Please consult
# http://lucene.apache.org/solr/ on how to set up a standalone Solr server.
#org.opencastproject.workflow.solr.url=http://localhost:8983/solr/

# Send server configuration data to the opencast project to help us track how people are using Matterhorn.  No security
# related information will be sent to the opencast project.  Comment this out to disable this feature.
org.opencastproject.anonymous.feedback.url=http://opencast.org/form/tracking

# The maximum number of concurrent files to ingest from the inbox directory
#org.opencastproject.inbox.threads=1

# Engage Distribution delay between elements in milliseconds
org.opencastproject.distribution.delay=1000

# The path for the ffmpeg binary in the ffmpeg encoder (default: /usr/local/bin/ffmpeg) 
#org.opencastproject.composer.ffmpegpath=/usr/local/bin/ffmpeg

# Configuration for the org.opencastproject.inspection.impl.MediaInfoAnalyzer binary (default: /usr/local/bin/mediainfo)
#org.opencastproject.inspection.mediainfo.path=/usr/local/bin/mediainfo

# The path for the qtsbtlembedder binary for QuickTime subtitle embedder (default: /usr/local/bin/qtsbtlembedder)
#org.opencastproject.composer.qtembedderpath=/usr/local/bin/qtsbtlembedder

# The path for Tesseract used by the textanalyzer
#org.opencastproject.textanalyzer.tesseract.path=/usr/local/bin/tesseract

# Additional options for Tesseract like language or page segmentation mode.
# The default are no additional options.
#org.opencastproject.textanalyzer.tesseract.options=-l eng -psm 3

# Path to the hunspell binary used by the matterhorn-dictionary-hunspell
# module. The default ist just “hunspell” which requires hunspell to be in the
# search path.
#org.opencastproject.dictionary.hunspell.binary=/usr/bin/hunspell

# Command to use for filtering text by the matterhorn-dictionary-hunspell
# module. The command is appended to the hunspell binary path. It should filter
# the text from stdin and print the recognized words to stdout. Usually this
# should be a combination of “-G” and a list of dictionaries. The default is to
# use “-d de_DE,en_GB,en_US -G”.
#org.opencastproject.dictionary.hunspell.command=-d de_DE,en_GB,en_US -G

# The path for gstreamer command line utility gst-launch used by exporter service
#org.opencastproject.export.gstreamerpath=/usr/bin/gst-launch

# Email address of the server's admin.
org.opencastproject.admin.email=admin@localhost

# Location of the temporary directory to build zip archives. Defaults to
# ${org.opencastproject.storage.dir}/archive-tmp
# org.opencastproject.workflow.handler.ZipWorkflowOperationHandler.tmpdir=${org.opencastproject.storage.dir}/archive-tmp
